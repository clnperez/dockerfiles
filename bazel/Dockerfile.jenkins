## To run this, bind-mount in whatever project you're building to a user's home dir.
## You'll lose your cache when you exit the container though, b/c bazel sym-links the
## output to ~/.cache/bazel/, which is outside the docker build scope on your system.

FROM ubuntu:18.04

# Below was taken from https://github.com/jenkinsci/docker-ssh-slave

ENV user=jenkins
ENV group=jenkins
ENV uid=10000
ENV gid=10000
ENV JENKINS_AGENT_HOME=/home/${user}

RUN apt-get update && apt-get install -y build-essential openjdk-11-jdk python python3 zip git cmake automake autoconf make wget libtool m4 sudo vim-tiny \
    curl pkg-config ninja-build unzip virtualenv && \
    rm -rf /var/cache/apt/lists/*

ENV JENKINS_AGENT_HOME=${JENKINS_AGENT_HOME}
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-ppc64el

RUN groupadd -g ${gid} ${group} && \
    useradd -d "${JENKINS_AGENT_HOME}" -u "${uid}" -g "${gid}" -m -s /bin/bash "${user}"

# setup sudo
RUN echo "jenkins ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# clang-10 from 18.04 base repo
RUN apt-get update && apt-get install -y clang-10 lld-10 clang-tidy-10 && \
    rm -rf /var/cache/apt/lists/*

RUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 1000 && \
    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 1000 && \
    update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-10 1000 && \
    update-alternatives --config clang && \
    update-alternatives --config clang++ && \
    update-alternatives --config clang-tidy

# build gn and run tests
# revert a few changes
# 282a428cc9603abb65d985144b92caa225cd6392 --icf change
# 082fbe397d5217dc21b01c63c7f20eb6b77a3093 lpthread change
#
# Gn changes at https://gn-review.googlesource.com/c/gn/+/9740
# will not work with older V8 branches as of now. Need to checkout it's parent.
#
RUN git clone https://gn.googlesource.com/gn && \
    cd gn && \
    sed -i -e 's/-Wl,--icf=all//g' ./build/gen.py && \
    sed -i -e 's/-lpthread/-pthread/g' ./build/gen.py && \
    python build/gen.py && \
    ninja -C out && \
    out/gn_unittests && \
    cp ./out/gn /bin/gn && \
    chmod +x /bin/gn

#RUN BAZEL_LATEST="$(curl https://oplab9.parqtec.unicamp.br/pub/ppc64el/bazel/ubuntu_16.04/latest/ 2>&1 \
#    | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep '^bazel' | head -n 1)" && \
#    curl -fSL https://oplab9.parqtec.unicamp.br/pub/ppc64el/bazel/ubuntu_16.04/latest/${BAZEL_LATEST} \
#    -o /usr/local/bin/bazel && chmod 755 /usr/local/bin/bazel

# lock to bazel 3.4.1
RUN curl https://oplab9.parqtec.unicamp.br/pub/ppc64el/bazel/ubuntu_18.04/bazel_bin_ppc64le_3.4.1 -o /usr/local/bin/bazel && chmod 755 /usr/local/bin/bazel

ARG GO_VERSION=1.13.7
RUN set -eux; \
    \
    arch="$(uname -m)"; \
    case "${arch##*-}" in \
        x86_64 | amd64) ARCH='amd64' ;; \
        ppc64el | ppc64le) ARCH='ppc64le' ;; \
        *) echo "unsupported architecture"; exit 1 ;; \
    esac; \
    wget -nv -O - https://storage.googleapis.com/golang/go${GO_VERSION}.linux-${ARCH}.tar.gz \
    | tar -C /usr/local -xz

ENV PATH=$PATH:/usr/local/go/bin/:$JAVA_HOME/bin

RUN bazel version
