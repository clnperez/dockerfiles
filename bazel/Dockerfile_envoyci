## To run this, bind-mount in whatever project you're building to a user's home dir.
## You'll lose your cache when you exit the container though, b/c bazel sym-links the
## output to ~/.cache/bazel/, which is outside the docker build scope on your system.

FROM ubuntu:22.04

# Below was taken from https://github.com/jenkinsci/docker-ssh-slave

ARG user=jenkins
ARG group=jenkins
ARG uid=10000
ARG gid=10000
ARG JENKINS_AGENT_HOME=/home/${user}
ARG TZ=UTC

# installing req versions taken from tools/base/requirements.in and .github/workflows/codeql-push.yml
RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential clang-14 lld-14 clang-tidy-14 \
    python3 python3-pip zip git gn cmake automake autoconf make wget libtool m4 sudo vim-tiny \
    curl pkg-config openssl libssl-dev ninja-build openjdk-21-jdk unzip virtualenv tzdata libtinfo5 && \
    rm -rf /var/cache/apt/lists/*


# setup sudo
RUN echo "${user} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

#ENV JENKINS_AGENT_HOME=${JENKINS_AGENT_HOME}
ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk-ppc64el

RUN groupadd -g ${gid} ${group} && \
    useradd -d "${JENKINS_AGENT_HOME}" -u "${uid}" -g "${gid}" -m -s /bin/bash "${user}"

RUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 1000 && \
    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 1000 && \
    update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-14 1000 && \
    update-alternatives --config clang && \
    update-alternatives --config clang++ && \
    update-alternatives --config clang-tidy

# UNIT TESTS FAIL SO REMOVING THIS TO USE STOCK GN
# build gn and run tests
# revert a few changes
# 282a428cc9603abb65d985144b92caa225cd6392 --icf change
# 082fbe397d5217dc21b01c63c7f20eb6b77a3093 lpthread change
#
# Gn changes at https://gn-review.googlesource.com/c/gn/+/9740
# will not work with older V8 branches as of now. Need to checkout it's parent.
#
#RUN git clone https://gn.googlesource.com/gn && \
#    cd gn && \
#    git checkout 5da62d5 && \
#    sed -i -e 's/-Wl,--icf=all//g' ./build/gen.py && \
#    sed -i -e 's/-lpthread/-pthread/g' ./build/gen.py && \
#    python3 build/gen.py && \
#    ninja -C out && \
#    out/gn_unittests && \
#    mv ./out/gn /bin/gn && \
#    chmod +x /bin/gn


ARG GO_VERSION=1.20.14
RUN set -eux; \
    \
    arch="$(uname -m)"; \
    case "${arch##*-}" in \
        x86_64 | amd64) ARCH='amd64' ;; \
        ppc64el | ppc64le) ARCH='ppc64le' ;; \
        *) echo "unsupported architecture"; exit 1 ;; \
    esac; \
    wget -nv -O - https://storage.googleapis.com/golang/go${GO_VERSION}.linux-${ARCH}.tar.gz \
    | tar -C /usr/local -xz

ENV PATH=$PATH:/usr/local/go/bin/:$JAVA_HOME/bin

# https://github.com/envoyproxy/envoy-build-tools/blob/main/.bazelversion
# todo: build and use bazelisk to pull the right version (use the bazel url env var)
RUN curl -L https://github.com/Jenkins-J/bazel/releases/download/bazel-7.4.0-ppc64le-release/bazel-7.4.0-ppc64le-release -o /usr/local/bin/bazel && chmod 755 /usr/local/bin/bazel

# Build cargo-bazel as there is no release available for Power

# Install cargo build tools
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && . "$HOME/.cargo/env"

# Download rules_rust and build cargo-bazel
RUN curl -L https://github.com/bazelbuild/rules_rust/releases/download/0.56.0/rules_rust-0.56.0.tar.gz \
&& mkdir rules_rust \
&& tar -C rules_rust -xzvf rules_rust-0.56.0.tar.gz \
&& cd rules_rust/crate_universe \
&& cargo build --bin=cargo-bazel \
&& export CARGO_BAZEL_GENERATOR_URL="file://$(pwd)/target/debug/cargo-bazel" \
&& cd "$HOME"

RUN bazel version

